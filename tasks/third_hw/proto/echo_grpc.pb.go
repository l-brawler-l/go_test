// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.3
// source: echo.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BankAccounts_Create_FullMethodName = "/proto.BankAccounts/Create"
	BankAccounts_Get_FullMethodName    = "/proto.BankAccounts/Get"
	BankAccounts_Patch_FullMethodName  = "/proto.BankAccounts/Patch"
	BankAccounts_Delete_FullMethodName = "/proto.BankAccounts/Delete"
	BankAccounts_Change_FullMethodName = "/proto.BankAccounts/Change"
)

// BankAccountsClient is the client API for BankAccounts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BankAccountsClient interface {
	Create(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Empty, error)
	Get(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountReply, error)
	Patch(ctx context.Context, in *PatchAccountRequest, opts ...grpc.CallOption) (*Empty, error)
	Delete(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*Empty, error)
	Change(ctx context.Context, in *ChangeAccountRequest, opts ...grpc.CallOption) (*Empty, error)
}

type bankAccountsClient struct {
	cc grpc.ClientConnInterface
}

func NewBankAccountsClient(cc grpc.ClientConnInterface) BankAccountsClient {
	return &bankAccountsClient{cc}
}

func (c *bankAccountsClient) Create(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BankAccounts_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankAccountsClient) Get(ctx context.Context, in *GetAccountRequest, opts ...grpc.CallOption) (*GetAccountReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountReply)
	err := c.cc.Invoke(ctx, BankAccounts_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankAccountsClient) Patch(ctx context.Context, in *PatchAccountRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BankAccounts_Patch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankAccountsClient) Delete(ctx context.Context, in *DeleteAccountRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BankAccounts_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bankAccountsClient) Change(ctx context.Context, in *ChangeAccountRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, BankAccounts_Change_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BankAccountsServer is the server API for BankAccounts service.
// All implementations must embed UnimplementedBankAccountsServer
// for forward compatibility.
type BankAccountsServer interface {
	Create(context.Context, *CreateAccountRequest) (*Empty, error)
	Get(context.Context, *GetAccountRequest) (*GetAccountReply, error)
	Patch(context.Context, *PatchAccountRequest) (*Empty, error)
	Delete(context.Context, *DeleteAccountRequest) (*Empty, error)
	Change(context.Context, *ChangeAccountRequest) (*Empty, error)
	mustEmbedUnimplementedBankAccountsServer()
}

// UnimplementedBankAccountsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBankAccountsServer struct{}

func (UnimplementedBankAccountsServer) Create(context.Context, *CreateAccountRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBankAccountsServer) Get(context.Context, *GetAccountRequest) (*GetAccountReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBankAccountsServer) Patch(context.Context, *PatchAccountRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Patch not implemented")
}
func (UnimplementedBankAccountsServer) Delete(context.Context, *DeleteAccountRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBankAccountsServer) Change(context.Context, *ChangeAccountRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Change not implemented")
}
func (UnimplementedBankAccountsServer) mustEmbedUnimplementedBankAccountsServer() {}
func (UnimplementedBankAccountsServer) testEmbeddedByValue()                      {}

// UnsafeBankAccountsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BankAccountsServer will
// result in compilation errors.
type UnsafeBankAccountsServer interface {
	mustEmbedUnimplementedBankAccountsServer()
}

func RegisterBankAccountsServer(s grpc.ServiceRegistrar, srv BankAccountsServer) {
	// If the following call pancis, it indicates UnimplementedBankAccountsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BankAccounts_ServiceDesc, srv)
}

func _BankAccounts_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankAccountsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankAccounts_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankAccountsServer).Create(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankAccounts_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankAccountsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankAccounts_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankAccountsServer).Get(ctx, req.(*GetAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankAccounts_Patch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankAccountsServer).Patch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankAccounts_Patch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankAccountsServer).Patch(ctx, req.(*PatchAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankAccounts_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankAccountsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankAccounts_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankAccountsServer).Delete(ctx, req.(*DeleteAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BankAccounts_Change_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BankAccountsServer).Change(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BankAccounts_Change_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BankAccountsServer).Change(ctx, req.(*ChangeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BankAccounts_ServiceDesc is the grpc.ServiceDesc for BankAccounts service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BankAccounts_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BankAccounts",
	HandlerType: (*BankAccountsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _BankAccounts_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BankAccounts_Get_Handler,
		},
		{
			MethodName: "Patch",
			Handler:    _BankAccounts_Patch_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BankAccounts_Delete_Handler,
		},
		{
			MethodName: "Change",
			Handler:    _BankAccounts_Change_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "echo.proto",
}
